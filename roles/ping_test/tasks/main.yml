---
- name: Set Vault address environment variable for all tasks
  ansible.builtin.set_fact:
    vault_env:
      VAULT_ADDR: "http://127.0.0.1:8200"

- name: Read vault credentials from remote file
  ansible.builtin.slurp:
    src: /home/ubuntu/vault-init.json
  register: vault_init_file

- name: Set root token as a fact
  ansible.builtin.set_fact:
    vault_root_token: "{{ (vault_init_file.content | b64decode | from_json).root_token }}"

# --- Test 1: Write and Read a K/V Secret ---
- name: TEST 1.1 | Enable KV v2 secrets engine at path 'secret'
  ansible.builtin.command: "vault secrets enable -path=secret kv-v2"
  environment:
    VAULT_ADDR: "{{ vault_env.VAULT_ADDR }}"
    VAULT_TOKEN: "{{ vault_root_token }}"
  register: kv_enable_result
  changed_when: kv_enable_result.rc == 0 and 'path is already in use' not in kv_enable_result.stderr
  failed_when: kv_enable_result.rc != 0 and 'path is already in use' not in kv_enable_result.stderr

- name: TEST 1.2 | Write a test secret using the root token
  ansible.builtin.command: "vault kv put secret/test-secret my-value=s3cr3t"
  environment:
    VAULT_ADDR: "{{ vault_env.VAULT_ADDR }}"
    VAULT_TOKEN: "{{ vault_root_token }}"
  changed_when: true

- name: TEST 1.3 | Read the test secret to verify it was written
  ansible.builtin.command: "vault kv get -format=json secret/test-secret"
  environment:
    VAULT_ADDR: "{{ vault_env.VAULT_ADDR }}"
    VAULT_TOKEN: "{{ vault_root_token }}"
  changed_when: false
  register: secret_read_result

- name: TEST 1.4 | Assert that the correct secret value was retrieved
  ansible.builtin.assert:
    that:
      - "(secret_read_result.stdout | from_json).data.data['my-value'] == 's3cr3t'"
    success_msg: "✅ SUCCESS: K/V secret 'secret/test-secret' was written and read successfully."
    fail_msg: "❌ FAILED: Could not verify the value of K/V secret 'secret/test-secret'."

# --- Test 2: Create and Apply a Read-Only Policy ---
- name: TEST 2.1 | Create a read-only policy for the test secret
  ansible.builtin.command: "vault policy write read-only-policy -"
  args:
    stdin: 'path "secret/data/test-secret" { capabilities = ["read"] }'
  environment:
    VAULT_ADDR: "{{ vault_env.VAULT_ADDR }}"
    VAULT_TOKEN: "{{ vault_root_token }}"
  changed_when: true

# --- Test 3: Create and Use a Scoped Auth Token ---
- name: TEST 3.1 | Create a new token with the read-only policy
  ansible.builtin.command: "vault token create -policy=read-only-policy -format=json"
  environment:
    VAULT_ADDR: "{{ vault_env.VAULT_ADDR }}"
    VAULT_TOKEN: "{{ vault_root_token }}"
  changed_when: true
  register: new_token_result

- name: Set new limited token as a fact
  ansible.builtin.set_fact:
    vault_limited_token: "{{ (new_token_result.stdout | from_json).auth.client_token }}"

- name: TEST 3.2 | Use the new token to successfully read the secret
  ansible.builtin.command: "vault kv get secret/test-secret"
  environment:
    VAULT_ADDR: "{{ vault_env.VAULT_ADDR }}"
    VAULT_TOKEN: "{{ vault_limited_token }}"
  changed_when: false
  register: limited_read_result

- name: TEST 3.3 | Assert that the limited token was correctly denied write access
  ansible.builtin.command: "vault kv put secret/test-secret my-value=new-secret"
  environment:
    VAULT_ADDR: "{{ vault_env.VAULT_ADDR }}"
    VAULT_TOKEN: "{{ vault_limited_token }}"
  register: limited_write_result
  failed_when: false # We expect this to fail
  changed_when: false
  check_mode: no # Run this task even in check mode

- name: TEST 3.4 | Assert that the write operation was denied as expected
  ansible.builtin.assert:
    that:
      - limited_write_result.rc != 0
      - "'permission denied' in limited_write_result.stderr"
    success_msg: "✅ SUCCESS: Limited token was correctly denied write access, and could read the secret."
    fail_msg: "❌ FAILED: Limited token was not denied write access as expected."