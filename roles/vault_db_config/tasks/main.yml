---
# This role configures the Vault database secrets engine.
# It is designed to be self-contained and idempotent.

- name: Read vault credentials from remote file
  ansible.builtin.slurp:
    src: /home/ubuntu/vault-init.json
  register: vault_init_file

- name: Set Vault connection details as facts
  ansible.builtin.set_fact:
    vault_env:
      VAULT_ADDR: "http://127.0.0.1:8200"
      VAULT_TOKEN: "{{ (vault_init_file.content | b64decode | from_json).root_token }}"

- name: Configure Vault Database Secrets Engine
  block:
    - name: Enable the Database secrets engine
      ansible.builtin.command: "vault secrets enable database"
      environment: "{{ vault_env }}"
      register: db_enable_result
      changed_when: "'path is already in use' not in db_enable_result.stderr"
      failed_when: db_enable_result.rc != 0 and 'path is already in use' not in db_enable_result.stderr

    - name: Configure the PostgreSQL database plugin
      ansible.builtin.command: >
        vault write database/config/postgresql
        plugin_name=postgresql-database-plugin
        allowed_roles="hcl-boundary-demo"
        connection_url="postgresql://bootstrap_user:{{ postgres_bootstrap_password }}@127.0.0.1:5432/myapp?sslmode=disable"
      environment: "{{ vault_env }}"
      changed_when: true
      no_log: true # Do not log the connection string

    - name: Create a role for generating dynamic credentials
      ansible.builtin.command: >
        vault write database/roles/hcl-boundary-demo
        db_name=postgresql
        default_ttl=1h
        max_ttl=24h
        creation_statements="CREATE ROLE \"{{ '{{' }}name{{ '}}' }}\" WITH LOGIN PASSWORD '{{ '{{' }}password{{ '}}' }}' VALID UNTIL '{{ '{{' }}expiration{{ '}}' }}';
        GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO \"{{ '{{' }}name{{ '}}' }}\";"
      environment: "{{ vault_env }}"
      changed_when: true

  rescue:
    - name: "ERROR: Failed to configure Vault database secrets engine"
      ansible.builtin.fail:
        msg: |
          The task '{{ ansible_failed_task.name }}' failed.
          STDOUT: {{ ansible_failed_result.stdout | default('N/A') }}
          STDERR: {{ ansible_failed_result.stderr | default('N/A') }}
