---
# --- Test 1: Write and Read a K/V Secret ---
- name: "TEST 1.1 | Enable KV v2 secrets engine at path 'secret'"
  ansible.builtin.command: "vault secrets enable -path=secret kv-v2"
  environment:
    VAULT_ADDR: "{{ vault_env.VAULT_ADDR }}"
    VAULT_TOKEN: "{{ vault_root_token }}"
  register: kv_enable_result
  changed_when: kv_enable_result.rc == 0
  failed_when: kv_enable_result.rc != 0 and 'path is already in use' not in kv_enable_result.stderr

- name: "TEST 1.2 | Write a secret to the KV store"
  ansible.builtin.command: "vault kv put secret/ping-test message='Hello from Ansible' timestamp='{{ ansible_date_time.iso8601 }}'"
  environment:
    VAULT_ADDR: "{{ vault_env.VAULT_ADDR }}"
    VAULT_TOKEN: "{{ vault_root_token }}"
  register: kv_write_result
  changed_when: kv_write_result.rc == 0

- name: "TEST 1.3 | Read the secret back from the KV store"
  ansible.builtin.command: "vault kv get -format=json secret/ping-test"
  environment:
    VAULT_ADDR: "{{ vault_env.VAULT_ADDR }}"
    VAULT_TOKEN: "{{ vault_root_token }}"
  register: kv_read_result
  changed_when: false

- name: "TEST 1.4 | Parse and verify the secret data"
  ansible.builtin.set_fact:
    secret_data: "{{ (kv_read_result.stdout | from_json).data.data }}"

- name: "TEST 1.5 | Assert that the secret contains expected values"
  ansible.builtin.assert:
    that:
      - secret_data.message == "Hello from Ansible"
      - secret_data.timestamp is defined
    success_msg: "✅ SUCCESS: KV secret was written and read successfully."
    fail_msg: "❌ FAILED: KV secret verification failed. Expected message: 'Hello from Ansible', got: '{{ secret_data.message }}'"

# --- Test 2: Create and Delete a Policy ---
- name: "TEST 2.1 | Create a policy file content"
  ansible.builtin.set_fact:
    test_policy_content: |
      path "secret/data/ping-test/*" {
        capabilities = ["create", "read", "update", "delete", "list"]
      }
      path "secret/metadata/ping-test/*" {
        capabilities = ["list", "read", "delete"]
      }

- name: "TEST 2.2 | Write the test policy to Vault"
  ansible.builtin.command: 
    cmd: "vault policy write ping-test-policy -"
    stdin: "{{ test_policy_content }}"
  environment:
    VAULT_ADDR: "{{ vault_env.VAULT_ADDR }}"
    VAULT_TOKEN: "{{ vault_root_token }}"
  register: policy_write_result
  changed_when: policy_write_result.rc == 0

- name: "TEST 2.3 | Read the policy back to verify it was created"
  ansible.builtin.command: "vault policy read ping-test-policy"
  environment:
    VAULT_ADDR: "{{ vault_env.VAULT_ADDR }}"
    VAULT_TOKEN: "{{ vault_root_token }}"
  register: policy_read_result
  changed_when: false

- name: "TEST 2.4 | Assert that the policy was created successfully"
  ansible.builtin.assert:
    that:
      - "'secret/data/ping-test' in policy_read_result.stdout"
      - "'create' in policy_read_result.stdout"
      - "'read' in policy_read_result.stdout"
    success_msg: "✅ SUCCESS: Policy 'ping-test-policy' was created and verified successfully."
    fail_msg: "❌ FAILED: Policy verification failed. Policy content: {{ policy_read_result.stdout }}"

- name: "TEST 2.5 | Delete the test policy (cleanup)"
  ansible.builtin.command: "vault policy delete ping-test-policy"
  environment:
    VAULT_ADDR: "{{ vault_env.VAULT_ADDR }}"
    VAULT_TOKEN: "{{ vault_root_token }}"
  register: policy_delete_result
  changed_when: policy_delete_result.rc == 0

# --- Test 3: Enable and Configure an Auth Method ---
- name: "TEST 3.1 | Enable userpass auth method"
  ansible.builtin.command: "vault auth enable userpass"
  environment:
    VAULT_ADDR: "{{ vault_env.VAULT_ADDR }}"
    VAULT_TOKEN: "{{ vault_root_token }}"
  register: auth_enable_result
  changed_when: auth_enable_result.rc == 0
  failed_when: auth_enable_result.rc != 0 and 'path is already in use' not in auth_enable_result.stderr

- name: "TEST 3.2 | Create a test user in userpass auth"
  ansible.builtin.command: "vault write auth/userpass/users/testuser password=testpass policies=default"
  environment:
    VAULT_ADDR: "{{ vault_env.VAULT_ADDR }}"
    VAULT_TOKEN: "{{ vault_root_token }}"
  register: user_create_result
  changed_when: user_create_result.rc == 0

- name: "TEST 3.3 | Authenticate as the test user"
  ansible.builtin.command: "vault write auth/userpass/login/testuser password=testpass"
  environment:
    VAULT_ADDR: "{{ vault_env.VAULT_ADDR }}"
  register: user_auth_result
  changed_when: false
  no_log: true

- name: "TEST 3.4 | Extract client token from authentication response"
  ansible.builtin.set_fact:
    test_user_token: "{{ (user_auth_result.stdout | regex_search('token\\s+(.+)', '\\1'))[0] }}"
  no_log: true

- name: "TEST 3.5 | Test token lookup with the new user token"
  ansible.builtin.command: "vault token lookup"
  environment:
    VAULT_ADDR: "{{ vault_env.VAULT_ADDR }}"
    VAULT_TOKEN: "{{ test_user_token }}"
  register: token_lookup_result
  changed_when: false
  no_log: true

- name: "TEST 3.6 | Assert that userpass authentication works"
  ansible.builtin.assert:
    that:
      - user_auth_result.rc == 0
      - test_user_token is defined
      - test_user_token | length > 0
      - token_lookup_result.rc == 0
    success_msg: "✅ SUCCESS: Userpass auth method configured and working correctly."
    fail_msg: "❌ FAILED: Userpass authentication test failed."

- name: "TEST 3.7 | Cleanup: Delete test user"
  ansible.builtin.command: "vault delete auth/userpass/users/testuser"
  environment:
    VAULT_ADDR: "{{ vault_env.VAULT_ADDR }}"
    VAULT_TOKEN: "{{ vault_root_token }}"
  register: user_delete_result
  changed_when: user_delete_result.rc == 0

# --- Test 4: Request and Use Dynamic Database Credentials ---
- name: "TEST 4.1 | Request dynamic DB credentials from Vault"
  ansible.builtin.command: "vault read -format=json database/creds/hcl-boundary-demo"
  environment:
    VAULT_ADDR: "{{ vault_env.VAULT_ADDR }}"
    VAULT_TOKEN: "{{ vault_root_token }}"
  changed_when: false # Reading a credential does not change state
  register: db_creds_result

- name: "TEST 4.2 | Set dynamic DB credentials as facts"
  ansible.builtin.set_fact:
    db_user: "{{ (db_creds_result.stdout | from_json).data.username }}"
    db_pass: "{{ (db_creds_result.stdout | from_json).data.password }}"
  no_log: true

- name: "TEST 4.3 | DEBUG: Received dynamic username from Vault"
  ansible.builtin.debug:
    msg: "Successfully fetched dynamic credentials. Username: {{ db_user }}, Lease ID: {{ (db_creds_result.stdout | from_json).lease_id }}"

- name: "TEST 4.4 | Verify dynamic credentials by connecting to PostgreSQL"
  community.postgresql.postgresql_info:
    login_user: "{{ db_user }}"
    login_password: "{{ db_pass }}"
    login_host: "127.0.0.1"
    db: myapp
  register: db_connection_result
  no_log: true

- name: "TEST 4.5 | Assert that the database connection was successful"
  ansible.builtin.assert:
    that:
      - not db_connection_result.failed
    success_msg: "✅ SUCCESS: Dynamic credentials for role 'hcl-boundary-demo' were successfully used to connect to PostgreSQL."
    fail_msg: "❌ FAILED: Could not connect to PostgreSQL with dynamic credentials."

# --- Final Summary ---
- name: "SUMMARY | All Vault tests completed successfully"
  ansible.builtin.debug:
    msg: |
      ✅ ALL TESTS PASSED! 
      - KV secrets engine: Working
      - Policy management: Working  
      - Userpass authentication: Working
      - Dynamic database credentials: Working
      
      Vault is properly configured and operational.